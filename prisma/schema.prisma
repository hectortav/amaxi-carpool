// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  firstname      String?   @db.Text
  lastname       String?   @db.Text
  dateOfBirth    DateTime?
  phone          String?
  addressId      String?   @unique
  address        Location? @relation(fields: [addressId], references: [id])
  licensePlate   String?
  driversLicense String?
  idNumber       String?

  carMaker       String?
  carModel       String?
  numberOfPassengers Int?

  myTrips       Trip[]
  trips         Passenger[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id        String @id @default(cuid())
  name      String @db.Text
  placeId   String
  latitude  String
  longitude String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?
  fromTrip Trip? @relation("from")
  toTrip   Trip? @relation("to")
}

model Trip {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fromId    String?   @unique
  from      Location? @relation(fields: [fromId], references: [id], name: "from")

  toId      String?   @unique
  to        Location? @relation(fields: [toId], references: [id], name: "to")

  date      DateTime
  
  passengers Passenger[]
  messages   Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Passenger {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tripId    String
  trip      Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tripId    String
  trip      Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  text      String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
